name: Performance (manual)

on:
  workflow_dispatch:
    inputs:
      endpoint:
        description: "Server URL"
        required: true
      vds:
        description: "vds path (aka https://account.blob.core.windows.net/container/blob)"
        required: true
      sas:
        description: "SAS with read privileges for vds"
        required: true
      filepath:
        description: "File to run in form /tests/performance/script-random-inlineslice.js"
        required: true
      medtime:
        description: "Limit for median time for requests to succeed"
        required: false
        default: "30000"
      maxtime:
        description: "Limit for p(95) time for requests to succeed"
        required: false
        default: "60000"

jobs:
  performance_tests:
    name: Run performance check for a chosen file
    runs-on: ubuntu-latest
    steps:
      - name: Hide sensitive data
        run: |
          secret_sas=$(jq -r '.inputs.sas' $GITHUB_EVENT_PATH)
          echo "::add-mask::$secret_sas"
          echo SAS="$secret_sas" >> $GITHUB_ENV

          secret_endpoint=$(jq -r '.inputs.endpoint' $GITHUB_EVENT_PATH)
          echo "::add-mask::$secret_endpoint"
          echo ENDPOINT="$secret_endpoint" >> $GITHUB_ENV

          vds=$(jq -r '.inputs.vds' $GITHUB_EVENT_PATH)
          # not foolproof, but good enough
          secret_storage_account=$(echo $vds | awk -F[/:] '{print $4}')
          echo "::add-mask::$secret_storage_account"
          echo VDS="$vds" >> $GITHUB_ENV

      - uses: actions/checkout@v4
      - name: Run "${{ inputs.filepath }}" performance tests for "${{ env.VDS }}"
        env:
          TEST_NAME: "Manual execution"
          LOGPATH: "/out"
          MEDTIME: ${{ inputs.medtime }}
          MAXTIME: ${{ inputs.maxtime }}
        run: |
          tag=performance
          docker build -f tests/performance/Dockerfile -t $tag .
          docker run \
            -e TEST_NAME \
            -e VDS \
            -e SAS \
            -e ENDPOINT \
            -e MEDTIME \
            -e MAXTIME \
            -e LOGPATH \
            -v $(pwd)/out:/out \
            $tag \
            /bin/sh -c 'python /tests/performance/performance.py ${{ inputs.filepath }}'

      - name: Print stderr
        if: always()
        continue-on-error: true
        run: |
          cat out/stderr.txt

      - name: Print stdout
        if: always()
        continue-on-error: true
        run: |
          cat out/stdout.txt

      - name: Print logs
        if: always()
        continue-on-error: true
        run: |
          cat out/loadtest.log

      - name: Print summary
        if: always()
        continue-on-error: true
        run: |
          cat out/summary.json
